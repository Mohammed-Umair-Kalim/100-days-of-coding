Question 141: Discuss the significance of the await reserved word in asynchronous JavaScript ?

Explain & TIP: The await operator is used to wait for a Promise to settle. It can only be used inside an async function.
Using await makes asynchronous code look and behave a little more like synchronous code, which can make it easier to understand and debug.

Question 142: Create a Promise that resolves with "Hello, World!" after 2 seconds ?

Explain & TIP: Promises in JavaScript are used for asynchronous computations and can be in one of these states: pending, fulfilled, or rejected.
A Promise that resolves after a delay demonstrates how to handle operations that take some time to complete, like fetching data or timing events.

Question 143: Show how to use the .then() and .catch() methods to handle Promise resolution and rejection ?

Explain & TIP: The .then() method is called when a Promise is successfully resolved, while .catch() is called when a Promise is rejected. Together,
they provide a powerful and readable way to handle asynchronous success and error scenarios.

Question 144: Explain the use of the Promise.all() method with an example ?

Explain & TIP: Promise.all() takes an iterable of Promises and returns a single Promise that resolves when all of the Promises in the iterable have resolved or
when the iterable contains no Promises. It is rejected if any of the passed Promises are rejected.
This method is useful for aggregating the results of multiple promises.

Question 145: Create a function that accepts a callback and invokes it with some arguments ?

Explain & TIP: Callbacks are functions passed as arguments to another function. This design pattern is very common in JavaScript for asynchronous operations,
event listeners, or to customize the behavior of a function with custom actions.

Question 146: Show an example of a callback function used to filter an array of numbers ?

Explain & TIP: The .filter() method creates a new array with all elements that pass the test implemented by the provided function.
This method is commonly used to search through an array and create a subset of it based on certain criteria.

Question 147: Explain how to handle errors in a callback pattern ?

Explain & TIP: Handling errors in a callback pattern often involves passing an error as the first argument to the callback.
This convention allows the callback function to check for errors before proceeding with its execution

Question 148: Demonstrate the use of the setTimeout() function to execute code after a delay ?

Explain & TIP: setTimeout() is a built-in JavaScript function that allows you to execute a piece of code after a specified delay.
It's especially useful for scheduling tasks, animations, or delaying execution without blocking the main thread.

Question 149: Explain the concept of the event loop in JavaScript with an example?

Explain & TIP: The event loop is a fundamental concept in JavaScript, enabling asynchronous operations.
It monitors the call stack and the callback queue. If the call stack is empty, it moves the first event from the queue to the stack,
ensuring non-blocking execution

Question 150: Describe how asynchronous callbacks differ from synchronous code execution ?

Explain & TIP: Asynchronous callbacks allow JavaScript to perform long network requests, file operations, or set timers without blocking the main thread,
enabling the continuation of code execution. Synchronous code, in contrast, runs sequentially, blocking further execution until the current operation completes.